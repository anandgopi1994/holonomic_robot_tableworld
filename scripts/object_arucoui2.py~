#!/usr/bin/env python
# license removed for brevity
import rospy
import sensor_msgs.msg
from std_msgs.msg import Float64
from sensor_msgs.msg import JointState
import imutils
import numpy as np
import argparse
import cv2
import time
import cv2
import cv2.aruco
trig=0
pub = rospy.Publisher('location', JointState, queue_size=512)
rospy.init_node('objectaruco', anonymous=True)
rate = rospy.Rate(500) # 10hz
video_capture = cv2.VideoCapture(0)

dictionary = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_ARUCO_ORIGINAL)#aruco dictionary
screenCnt = ''
centerBlob = (0, 0)
blackLower = (0, 0, 0)
blackUpper = (1, 1, 1)
location= sensor_msgs.msg.JointState()
	# Setup SimpleBlobDetector parameters.
params = cv2.SimpleBlobDetector_Params()
params.filterByArea = True
params.minArea = 4500
params.blobColor = 0

	# Change thresholds
params.minThreshold = 10;
params.maxThreshold = 2000;
a=0
b=0
cnt=0
c=0
suma=0
sumb=0
xg=0
yg=0
x1=0
x2=0
y1=0
y2=0
ln=0
Xpix1=0
Ypix1=0
xg1=0
yg1=0
Xpix=0
Ypix=0
xg=0
yg=0
s0=0
s1=0
s2=0
s3=0
s4=0
s5=0
s6=0
t=0
trigbutton=0
	# Create a detector with the parameters
ver = (cv2.__version__).split('.')
if int(ver[0]) < 3 :
	    detector = cv2.SimpleBlobDetector(params)
else : 
	  	detector = cv2.SimpleBlobDetector_create(params)	
	

ls = []
flag = []
def inside(num,a,b):
	if(a<=num<=b):
		return True
	else:
		return False
def callback(data):
    
    global trig,s0,s1,s2,s3,s4,s5,s6,t,trigbutton
    seq=data.header.seq
    print seq
    if data.position[7]==1 and seq==data.header.seq:
    	trig=1
    	trigbutton=0
    elif data.position[7]==0 and seq==data.header.seq:
    	trig=0
    	trigbutton=1
    elif seq==None:
    	trigbutton=0
    else:
    	trigbutton=0
    
    s0=data.position[0]
    s1=data.position[1]
    s2=data.position[2]
    s3=data.position[3]
    s4=data.position[4]
    s5=data.position[5]
    s6=data.position[6]
    t=data.position[7]
    """if data.position[7]==1 and trig ==0:
    
        location.position=[Xpix,Ypix,xg,yg]
        trig=1
        
        	#toSend += [point[0])
        pub.publish(location)"""


    
    #print trig
#if __name__ == '__main__':
while True:
		
	    # Capture frame-by-frame
		(grabbed, image) = video_capture.read()
		gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
		[pos,res,re] = cv2.aruco.detectMarkers(gray,dictionary)
		for i in pos:
			x1= i[0][0][0]
			y1= i[0][0][1]
			x2= i[0][2][0]
			y2= i[0][2][1]
		x=x1+((x2-x1)/2)
		y=y1+((y2-y1)/2)
		if len(pos) > 0:
			cv2.aruco.drawDetectedMarkers(gray,pos,res)
		newX1 = -(326-x)
		newY1 = 420-y
		origin = (221, 250)
		xg = newX1/ 15.238# 36.5 is the pixel/cm ratio in xdir
		yg = newY1 / 15.23
		centeraruco = (int(newX1) ,int(newY1))
	    # Display the resulting frame
	    	
		hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
	
		mask = cv2.inRange(hsv, blackLower, blackUpper)
		mask = cv2.erode(mask, None, iterations=1)
		mask = cv2.dilate(mask, None, iterations=1)
	
		ratio = image.shape[0] / 500.0
		orig = image.copy()
		image = imutils.resize(image, height = 500)
	
		gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
		gray = cv2.GaussianBlur(gray, (5, 5), 0)
		edged = cv2.Canny(gray, 75, 200)

		keypoints = detector.detect(image)
		
		im_with_keypoints = cv2.drawKeypoints(image, keypoints, np.array([]), (0,0,255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
	
		origin = (221, 250)
		Xpixold=0
		Ypixold=0
		for keyPoint in keypoints:
				x = int(keyPoint.pt[0])
				y = int(keyPoint.pt[1])
				s = int(keyPoint.size)
				centerBlob = (x ,y)
		# 21,31 is pixel coordinate at topleft corner in the square boundary drwan on a white paper. So we are we are remapping that corner as origin
				newX = -(326-x)
				newY = 420-y
				Xpix = newX / 15.238# 36.5 is the pixel/cm ratio in xdir
				Ypix = newY / 15.23# 38.9 is the pixel/cm ratio in ydir
				#cv2.circle(image, (origin), 3, (0, 255, 0), 1)
				cv2.circle(image, centerBlob, 3, (0, 0, 255), 1 )
				cv2.putText(image, "dx: {}, dy: {}".format(x, y), (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 0.65, (0, 0, 255), 1)
				a = Xpix
				b = Ypix

				#location.position=[Xpix,Ypix]
				'''if(Xpixold!=0 and Ypixold!=0):
					if(res[1] ==101 and Xpixold-Xpix>0.5 and Ypixold-Ypix>0.5):
						location.position=[Xpixold,Ypixold]
						c=1
						pub.publish(location)
					elif(res[1] ==101 and Xpixold-Xpix<0.5 or Ypixold-Ypix<0.5):
						c=0

				elif(Xpixold==0 and Ypixold==0):
					pub.publish(location)'''

				#if np.any(tuple((a,b)) not in ls) and np.any(tuple((a+1,b+1)) not in ls) and np.any(tuple((a-1,b-1)) not in ls) and np.any(tuple((a-1,b+1)) not in ls) and np.any(tuple((a+1,b-1)) not in ls):
			
				#print a
				#print b
				#print tuple in ls
				#print len(ls)
				
					#print ls
				
				cv2.putText(image, "dx: {}cm, dy: {}cm ,xgoal: {}cm,ygoal: {}cm".format(Xpix, Ypix ,xg,yg), (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.65, (0, 0, 255), 1)
				
				#cv2.circle(image, (origin), 3, (0, 255, 0), 1)
				

				
    			
					
					
				#print trig
				
				#client.publish("co-ordinatesZ",str(050))
		
				#client.publish("co-ordinates",str(Xpix) + " " + str(Ypix))
				#client.publish("co-ordinatesY",Ypix)
		
				#time.sleep(25)
			    
        #Xpixold=2
		#Ypixold=Ypix
		rospy.Subscriber("servo", JointState, callback)
		print trig
		if trig==1:
			
					location.position=[Xpix,Ypix,xg,yg,s0,s1,s2,s3,s4,s5,s6,t]
					
					pub.publish(location)
					Xpix1=Xpix
					Ypix1=Ypix
					xg1=xg
					yg1=yg
		elif trig==0 and trigbutton==1:
			location.position=[Xpix,Ypix,xg,yg,s0,s1,s2,s3,s4,s5,s6,t]
					
			pub.publish(location)
					
		trig=3
		cv2.circle(image, centeraruco, 3, (255, 0, 0), 1 )
		cv2.imshow("Keypoints", im_with_keypoints)
		cv2.imshow("Outline", image)
		cv2.imshow("Edged", edged)
		 
		#pub.publish(location)
		if cv2.waitKey(1) & 0xFF == ord('q'):
				break
		if ((a is not None) and (b is not None)):
			cnt=cnt+1
		rate.sleep()
					
video_capture.release()
cv2.destroyAllWindows()
		  	 
	
rate.sleep()

