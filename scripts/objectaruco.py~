#!/usr/bin/env python
# license removed for brevity
import rospy
import sensor_msgs.msg
from std_msgs.msg import Float64
from sensor_msgs.msg import JointState
import imutils
import numpy as np
import argparse
import cv2
import time
if __name__ == '__main__':
	pub = rospy.Publisher('location', JointState, queue_size=512)
	rospy.init_node('objectaruco', anonymous=True)
	rate = rospy.Rate(500) # 10hz
	video_capture = cv2.VideoCapture(0)
	#dictionary = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_ARUCO_ORIGINAL)#aruco dictionary
	screenCnt = ''
	centerBlob = (0, 0)
	blackLower = (0, 0, 0)
	blackUpper = (1, 1, 1)
	location= sensor_msgs.msg.JointState()
	# Setup SimpleBlobDetector parameters.
	params = cv2.SimpleBlobDetector_Params()
	params.filterByArea = True
	params.minArea = 2500
	params.blobColor = 0
	params.filterByConvexity = True
	params.minConvexity = 0.3
	# Change thresholds
	params.minThreshold = 10;
	params.maxThreshold = 2000;
	Xpix=0
	Ypix=0
	c=0
	# Create a detector with the parameters
	ver = (cv2.__version__).split('.')
	if int(ver[0]) < 3 :
	    detector = cv2.SimpleBlobDetector(params)
	else : 
	    detector = cv2.SimpleBlobDetector_create(params)
	

	ls = []
	flag = []
	def inside(num,a,b):
			if(a<=num<=b):
				return True
			else:
				return False
	while True:
	    # Capture frame-by-frame
		(grabbed, image) = video_capture.read()
		gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
		#res = cv2.aruco.detectMarkers(gray,dictionary)
	    	#print(res[0],res[1],len(res[2]))

	    	#if len(res[0]) > 0:
			#cv2.aruco.drawDetectedMarkers(image,res[0],res[1])
	    # Display the resulting frame
	    	
		hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
	
		mask = cv2.inRange(hsv, blackLower, blackUpper)
		mask = cv2.erode(mask, None, iterations=1)
		mask = cv2.dilate(mask, None, iterations=1)
	
		ratio = image.shape[0] / 500.0
		orig = image.copy()
		image = imutils.resize(image, height = 500)
	
		gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
		gray = cv2.GaussianBlur(gray, (5, 5), 0)
		edged = cv2.Canny(gray, 75, 200)

		keypoints = detector.detect(image)
		
		im_with_keypoints = cv2.drawKeypoints(image, keypoints, np.array([]), (0,0,255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
	
		origin = (221, 250)
		Xpixold=0
		Ypixold=0
		for keyPoint in keypoints:
				x = int(keyPoint.pt[0])
				y = int(keyPoint.pt[1])
				s = int(keyPoint.size)
				centerBlob = (x ,y)
		# 21,31 is pixel coordinate at topleft corner in the square boundary drwan on a white paper. So we are we are remapping that corner as origin
				newX = -(319-x)
				newY = 412-y
				Xpix = newX / 15.33# 36.5 is the pixel/cm ratio in xdir
				Ypix = newY / 15.23# 38.9 is the pixel/cm ratio in ydir
				cv2.circle(image, (origin), 3, (0, 255, 0), 1)
				cv2.circle(image, centerBlob, 3, (0, 0, 255), 1 )
				cv2.putText(image, "dx: {}, dy: {}".format(x, y), (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 0.65, (0, 0, 255), 1)
				a = Xpix
				b = Ypix

				p1=100.0
				p2=300.0
				location.position=[Xpix,Ypix]
				'''if(Xpixold!=0 and Ypixold!=0):
					if(res[1] ==101 and Xpixold-Xpix>0.5 and Ypixold-Ypix>0.5):
						location.position=[Xpixold,Ypixold]
						c=1
						pub.publish(location)
					elif(res[1] ==101 and Xpixold-Xpix<0.5 or Ypixold-Ypix<0.5):
						c=0

				elif(Xpixold==0 and Ypixold==0):
					pub.publish(location)'''

				#if np.any(tuple((a,b)) not in ls) and np.any(tuple((a+1,b+1)) not in ls) and np.any(tuple((a-1,b-1)) not in ls) and np.any(tuple((a-1,b+1)) not in ls) and np.any(tuple((a+1,b-1)) not in ls):
			
				#print a
				#print b
				#print tuple in ls
				#print len(ls)
				if len(ls) == 0:
					ls.append(tuple((a,b)))
				flag = []
				for t in ls:
					if ((inside(a,t[0]-0.5,t[0]+0.5))  and (inside(b,t[1]-0.5,t[1]+0.5))):
						#tp = tuple((a,b))
						flag.append(False)
						#ls.append(tp)
					else:
						flag.append(True)
				if True not in flag:
					tp = tuple((a,b))
					ls.append(tp)
					#print len(ls)
					#print ls
				
				cv2.putText(image, "dx: {}cm, dy: {}cm".format(Xpix, Ypix), (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.65, (0, 0, 255), 1)
				for point in ls:
					location.position=[point[0],point[1]]#toSend += [point[0])
				pub.publish(location)
				#client.publish("co-ordinatesZ",str(050))
		
				#client.publish("co-ordinates",str(Xpix) + " " + str(Ypix))
				#client.publish("co-ordinatesY",Ypix)
		
				#time.sleep(25)
			    
        #Xpixold=2
		#Ypixold=Ypix
		cv2.imshow("Keypoints", im_with_keypoints)
		cv2.imshow("Outline", image)
		cv2.imshow("Edged", edged)
		if(c==1):
			Xpixold=Xpix
			Ypixold=Ypix
		#pub.publish(location)
		if cv2.waitKey(1) & 0xFF == ord('q'):
				break
		
					
	video_capture.release()
	cv2.destroyAllWindows()
		  	 
	
	rate.sleep()


