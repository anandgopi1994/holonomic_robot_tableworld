#include <ros/ros.h>
#include <moveit/move_group_interface/move_group.h>
#include <moveit/robot_state/conversions.h>
#include <moveit_msgs/DisplayRobotState.h>
#include <boost/math/constants/constants.hpp>
#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/robot_model/robot_model.h>
#include <moveit/robot_state/robot_state.h>
#include <moveit/planning_scene_monitor/planning_scene_monitor.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <geometric_shapes/solid_primitive_dims.h>
#include <mapping_msgs/CollisionObject.h>
#include <geometric_shapes_msgs/Shape.h>
int main(int argc, char **argv)
{
  ros::init(argc, argv, "move_group_interface_demo", ros::init_options::AnonymousName);

  ros::AsyncSpinner spinner(5);
  spinner.start();
  
  moveit::planning_interface::MoveGroup group("manipulator");
moveit::planning_interface::PlanningSceneInterface planning_scene_interface;
  ROS_INFO("Reference frame: [%s]",group.getPlanningFrame().c_str());
std::vector<geometry_msgs::Pose> waypoints;

  geometry_msgs::Pose target_pose1;
 geometry_msgs::Pose target_pose2;
geometry_msgs::Pose target_pose3;

 group.setPlannerId("RRTConnectkConfigDefault");
    //group.setPlannerId("KPIECEkConfigDefault");
    group.setMaxAccelerationScalingFactor(0.1);
group.setMaxVelocityScalingFactor(0.1);
  

/*robot_model_loader::RobotModelLoader robot_model_loader("robot_description");
robot_model::RobotModelPtr kinematic_model = robot_model_loader.getModel();
 ROS_INFO("Model frame: %s", kinematic_model->getModelFrame().c_str());
 robot_state::RobotStatePtr kinematic_state(new robot_state::RobotState(kinematic_model));
  kinematic_state->setToDefaultValues();
  const robot_state::JointModelGroup* joint_model_group = kinematic_model->getJointModelGroup("manipulator");

  const std::vector<std::string> &joint_names = joint_model_group->getJointModelNames();

  // Get Joint Values
  // ^^^^^^^^^^^^^^^^
  // We can retreive the current set of joint values stored in the state for the right arm.
  std::vector<double> joint_values;
  kinematic_state->copyJointGroupPositions(joint_model_group, joint_values);
  for(std::size_t i = 0; i < joint_names.size(); ++i)
  {
    ROS_INFO("Joint %s: %f", joint_names[i].c_str(), joint_values[i]);
  }

  // Joint Limits
  // ^^^^^^^^^^^^
  // setJointGroupPositions() does not enforce joint limits by itself, but a call to enforceBounds() will do it.
  // Set one joint in the right arm outside its joint limit 
  joint_values[0] = 1.57;
  kinematic_state->setJointGroupPositions(joint_model_group, joint_values);

  /// Check whether any joint is outside its joint limits /
  ROS_INFO_STREAM("Current state is " << (kinematic_state->satisfiesBounds() ? "valid" : "not valid"));

  /// Enforce the joint limits for this state and check again/
  kinematic_state->enforceBounds();
  ROS_INFO_STREAM("Current state is " << (kinematic_state->satisfiesBounds() ? "valid" : "not valid"));

  // Forward Kinematics
  // ^^^^^^^^^^^^^^^^^^
  // Now, we can compute forward kinematics for a set of random joint
  // values. Note that we would like to find the pose of the
  // "r_wrist_roll_link" which is the most distal link in the
  // "right_arm" of the robot.
  kinematic_state->setToRandomPositions(joint_model_group);
  const Eigen::Affine3d &end_effector_state = kinematic_state->getGlobalLinkTransform("link_6");

  //Print end-effector pose. Remember that this is in the model frame /
  ROS_INFO_STREAM("Translation: " << end_effector_state.translation());
  ROS_INFO_STREAM("Rotation: " << end_effector_state.rotation());

  // Inverse Kinematics
  // ^^^^^^^^^^^^^^^^^^
  // We can now solve inverse kinematics (IK) for the right arm of the
  // PR2 robot. To solve IK, we will need the following:
  // * The desired pose of the end-effector (by default, this is the last link in the "right_arm" chain): end_effector_state that we computed in the step above.
  // * The number of attempts to be made at solving IK: 5
  // * The timeout for each attempt: 0.1 s
  bool found_ik = kinematic_state->setFromIK(joint_model_group, end_effector_state, 10, 0.1);

  // Now, we can print out the IK solution (if found):
  if (found_ik)
  {
    kinematic_state->copyJointGroupPositions(joint_model_group, joint_values);
    for(std::size_t i=0; i < joint_names.size(); ++i)
    {
      ROS_INFO("Joint %s: %f", joint_names[i].c_str(), joint_values[i]);
    }
  }
  else
  {
    ROS_INFO("Did not find IK solution");
  }







// Get the Jacobian
  // ^^^^^^^^^^^^^^^^
  // We can also get the Jacobian from the :moveit_core:`RobotState`.
  Eigen::Vector3d reference_point_position(0.0,0.0,0.0);
  Eigen::MatrixXd jacobian;
  kinematic_state->getJacobian(joint_model_group, kinematic_state->getLinkModel(joint_model_group->getLinkModelNames().back()),
                               reference_point_position,
                               jacobian);
  ROS_INFO_STREAM("Jacobian: " << jacobian);
  // END_TUTORIAL

  // Get Joint Values
  // ^^^^^^^^^^^^^^^^
  // We can retreive the current set of joint values stored in the state for the right arm.*/
  




while(1)
{
 //ROS_INFO_STREAM("Jacobian: " << jacobian);
group.setMaxAccelerationScalingFactor(0.005);
group.setMaxVelocityScalingFactor(0.005);

  target_pose1.position.x =0.750045 ;

  target_pose1.position.y =-0.00449587;

  target_pose1.position.z =1.17302;

  target_pose1.orientation.x= 2.22693e-05;

  target_pose1.orientation.y = 0.843563;

  target_pose1.orientation.z =4.03589e-05;

  target_pose1.orientation.w =  0.53703;


  group.setPoseTarget(target_pose1);
 

group.move();

/*//Moving single joint

std::vector<double> group_variable_values;
group.getCurrentState()->copyJointGroupPositions(group.getCurrentState()->getRobotModel()->getJointModelGroup(group.getName()), group_variable_values);
group_variable_values[5] = -1.0;//giving joint 2 the required angle to move
group.setJointValueTarget(group_variable_values);
group.asyncMove();

/* Sleep to give Rviz time to visualize the plan. */
//sleep(5.0);
  //group.move();
sleep(8);
group.setMaxAccelerationScalingFactor(0.1);
group.setMaxVelocityScalingFactor(0.1);
target_pose2.position.x =0.816431 ;

  target_pose2.position.y =-0.0192063 ;

  target_pose2.position.z =1.06127;

  target_pose2.orientation.x= 2.22693e-05;

  target_pose2.orientation.y = 0.843563;

  target_pose2.orientation.z = 4.03589e-05;

  target_pose2.orientation.w = 0.53703;


  group.setPoseTarget(target_pose2);

//group.asyncMove();
  group.move();
sleep(5);
std::vector<geometry_msgs::Pose> waypoints;

geometry_msgs::Pose target_pose3 = target_pose2;

target_pose3.position.z -= 0.2;
waypoints.push_back(target_pose3);  // up and out

target_pose3.position.y -= 0.2;
waypoints.push_back(target_pose3);
target_pose3.position.z -= 0.2;

waypoints.push_back(target_pose3);
moveit_msgs::RobotTrajectory trajectory;
double fraction = group.computeCartesianPath(waypoints,
                                             0.01,  // eef_step
                                             0.0,   // jump_threshold
                                             trajectory);

ROS_INFO("Visualizing plan 4 (cartesian path) (%.2f%% acheived)",
      fraction * 100.0);
/* Sleep to give Rviz time to visualize the plan. */
sleep(15.0);

}
group.stop();
 ros::spin();
//}
//sleep(0.1);*/

  //return 0;
//}
}
