#include <ros/ros.h>
   #include <visualization_msgs/Marker.h>
   #include "sensor_msgs/JointState.h"
#include "std_msgs/UInt16.h"
#include "std_msgs/Float64.h"

//#include <planning_display.h>
#include <moveit/move_group_interface/move_group.h>

 //#include <arm_navigation_msgs/DisplayTrajectory.h>

 

 //#include <map>

float range=25 ;
float ra;

//range=1000;

void rangeCallback(const sensor_msgs::JointState::ConstPtr& range_data1)
{
//sleep(10);
  range = range_data1->position[3];
ra=abs(range);
 ROS_INFO("I heard: [%f]", range);
ros::NodeHandle n;
     ros::Rate r(1);
//sleep(10);
   ros::Publisher chatter_pub = n.advertise<std_msgs::Float64>("mytopic",1000); 
 while (ros::ok())
  {
std_msgs::Float64 msg;
msg.data=range;

chatter_pub.publish(msg);
//sleep(10);
ros::spin();
		//Added a delay so not to spam
//sleep(5);
//ros::spin();

   }
}
  
 

   int main( int argc, char** argv )
   {
    ros::init(argc, argv, "basic");
     ros::NodeHandle n;
     ros::Rate r(1);
    //ros::Publisher marker_pub = n.advertise<visualization_msgs::Marker>("visualization_marker", 1);
 
ros::Subscriber sub = n.subscribe("/joint_states", 9600,rangeCallback);   
ros::spin();
return 0;
//r.sleep();
}    

