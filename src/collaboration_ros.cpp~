#include <ros/ros.h>
   #include <visualization_msgs/Marker.h>
   #include "sensor_msgs/Range.h"
#include "std_msgs/Bool.h"
//#include <planning_display.h>
#include <moveit/move_group_interface/move_group.h>

#include <message_filters/synchronizer.h>
   #include <message_filters/sync_policies/approximate_time.h>

    #include <message_filters/subscriber.h>
#include <message_filters/time_synchronizer.h>
   
using namespace sensor_msgs;
    using namespace message_filters;
 //#include <arm_navigation_msgs/DisplayTrajectory.h>

 //ros::NodeHandle n;
int a;
 //#include <map>

float range=1 ;
float ranged;
//range=1000;
float range1 ;
float range2 ;
int r=1;
int i=1;
int j=2; 
geometry_msgs::Pose target_pose1;
geometry_msgs::Pose target_pose2;
geometry_msgs::Pose target_pose3;
geometry_msgs::Pose target_pose4;
geometry_msgs::Pose target_pose5;
geometry_msgs::Pose target_pose6;
geometry_msgs::Pose target_pose7;
geometry_msgs::Pose target_pose8;
geometry_msgs::Pose target_pose9;
geometry_msgs::Pose target_pose10;
geometry_msgs::Pose target_pose11;
geometry_msgs::Pose target_pose12;
geometry_msgs::Pose target_pose13;
geometry_msgs::Pose target_pose14;
geometry_msgs::Pose target_pose15;
geometry_msgs::Pose target_pose16;
geometry_msgs::Pose target_pose17;
//int i=1;
void  rangeCallback(const sensor_msgs::Range::ConstPtr& range_data1)
{
range = range_data1->range;
ranged=abs(range);
ROS_INFO("I heard: [%f]", range);
 
moveit::planning_interface::MoveGroup group("manipulator");

sleep(0.8);
target_pose1.orientation.w = 0.70714;

target_pose1.orientation.x= -2.7274e-05;

target_pose1.orientation.y = 0.70707;

target_pose1.orientation.z = 5.5968e-06;

target_pose1.position.x = 0.94004;

target_pose1.position.y = 4.3703e-05;

target_pose1.position.z = 1.455;
if(range<0 || (50<=ranged<=60))
{
group.setMaxAccelerationScalingFactor(0.1);
group.setMaxVelocityScalingFactor(0.1);
sleep(0.5);
}

group.setPoseTarget(target_pose1);

  ///Motion plan from current location to custom position

//success = group.plan(my_plan);
group.asyncMove();
 sleep(.8);
group.getCurrentJointValues ();
//ROS_INFO("Visualizing plan 1 (pose goal) %s",success?"":"FAILED");
break;
case 2:
 
target_pose2.orientation.w = 0.70718;

  target_pose2.orientation.x= -9.8623e-06;

  target_pose2.orientation.y = 0.70703;

  target_pose2.orientation.z = 1.5462e-05;//-4.0823e-05;

  target_pose2.position.x = 0.98928;

  target_pose2.position.y = 0.026022;

  target_pose2.position.z = 1.4017;

  group.setPoseTarget(target_pose2);
 
group.getCurrentJointValues ();

  
group.asyncMove();


sleep(0.5);
 
ros::spin();

}
int main( int argc, char** argv )
  {
   ros::init(argc, argv, "basic_shapes2");
   ros::NodeHandle m;
   ros::Rate r(1);
   ros::Subscriber sub = m.subscribe("range_data1", 1000,rangeCallback);     
   ros::spin();
   return 0;
}    

