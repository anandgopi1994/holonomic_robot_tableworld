#include <ros/ros.h>
#include <moveit/move_group_interface/move_group.h>
#include <moveit/robot_state/conversions.h>
#include <moveit_msgs/DisplayRobotState.h>
#include <boost/math/constants/constants.hpp>
#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/robot_model/robot_model.h>
#include <moveit/robot_state/robot_state.h>
#include <moveit/planning_scene_monitor/planning_scene_monitor.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <geometric_shapes/solid_primitive_dims.h>
#include <mapping_msgs/CollisionObject.h>
#include <geometric_shapes_msgs/Shape.h>
#include <stdio.h>
#include "std_msgs/Float32.h"
moveit::planning_interface::PlanningSceneInterface planning_scene_interface;
float detect; 
 float sx;
float sy;
float sz;
  float i=0;
int j=1;
int c=1;
int a=0;
void  rangeCallback(const std_msgs::Float32::ConstPtr& pir_data)
{
  //ros::init(argc, argv, "move_group_interface_demo", ros::init_options::AnonymousName);

detect=pir_data->data;
//sleep(5);
  //spinner.start();
 ROS_INFO("I heard: [%f]", detect);
  moveit::planning_interface::MoveGroup group("manipulator");
//moveit::planning_interface::PlanningSceneInterface planning_scene_interface;
 // ROS_INFO("Reference frame: [%s]",group.getPlanningFrame().c_str());
//std::vector<geometry_msgs::Pose> waypoints;

 geometry_msgs::Pose target_pose1;
 geometry_msgs::Pose target_pose2;
geometry_msgs::Pose target_pose3;
geometry_msgs::Pose target_pose4;
 geometry_msgs::Pose target_pose5;
geometry_msgs::Pose target_pose6;
geometry_msgs::Pose target_pose7;
 geometry_msgs::Pose target_pose8;
geometry_msgs::Pose target_pose9;
geometry_msgs::Pose target_pose10;
 geometry_msgs::Pose target_pose11;
 geometry_msgs::Pose target_pose12;
geometry_msgs::Pose target_pose13;
geometry_msgs::Pose target_pose14;
 geometry_msgs::Pose target_pose15;
geometry_msgs::Pose target_pose16;
geometry_msgs::Pose target_pose17;
 geometry_msgs::Pose target_pose18;
geometry_msgs::Pose target_pose19;
 geometry_msgs::Pose target_pose20;
 geometry_msgs::Pose target_pose21;
geometry_msgs::Pose target_pose22;
geometry_msgs::Pose target_pose23;
 geometry_msgs::Pose target_pose24;
geometry_msgs::Pose target_pose25;
geometry_msgs::Pose target_pose26;
 geometry_msgs::Pose target_pose27;
 geometry_msgs::Pose target_pose28;
geometry_msgs::Pose target_pose29;
geometry_msgs::Pose target_pose30;
 geometry_msgs::Pose target_pose31;
geometry_msgs::Pose target_pose32;
geometry_msgs::Pose target_pose33;
 geometry_msgs::Pose target_pose34;
geometry_msgs::Pose target_pose35;
 geometry_msgs::Pose target_pose36;
 geometry_msgs::Pose target_pose37;
geometry_msgs::Pose target_pose38;
geometry_msgs::Pose target_pose39;
 geometry_msgs::Pose target_pose40;
geometry_msgs::Pose target_pose41;
geometry_msgs::Pose target_pose42;
 geometry_msgs::Pose target_pose43;
geometry_msgs::Pose target_pose44;
 geometry_msgs::Pose target_pose45;
 geometry_msgs::Pose target_pose46;
geometry_msgs::Pose target_pose47;
geometry_msgs::Pose target_pose48;
 geometry_msgs::Pose target_pose49;
geometry_msgs::Pose target_pose50;
geometry_msgs::Pose target_pose51;
 geometry_msgs::Pose target_pose52;
 geometry_msgs::Pose target_pose53;
geometry_msgs::Pose target_pose54;
geometry_msgs::Pose target_pose55;
 geometry_msgs::Pose target_pose56;
geometry_msgs::Pose target_pose57;
geometry_msgs::Pose target_pose58;
 geometry_msgs::Pose target_pose59;
group.setPlannerId("RRTConnectkConfigDefault");
    //group.setPlannerId("KPIECEkConfigDefault");
    group.setMaxAccelerationScalingFactor(0.05);
group.setMaxVelocityScalingFactor(0.05);
ROS_INFO_STREAM("reached1 "); 

 ros::spin();
//}
//sleep(0.1);*/

  //return 0;
//}
}
int main( int argc, char** argv )
   {
    ros::init(argc, argv, "basic");
     ros::NodeHandle m;
     ros::Rate r(1);

 /*message_filters::Subscriber<sensor_msgs::Range> sub1(m, "range_data1", 1);
     message_filters::Subscriber<sensor_msgs::Range> sub2(m, "range_data2", 1);
    // TimeSynchronizer<Range, Range> sync(sub1, sub2, 10);
typedef sync_policies::ExactTime<Range, Range> MySyncPolicy;
 Synchronizer<MySyncPolicy> sync(MySyncPolicy(10), sub1, sub2);
     sync.registerCallback(boost::bind(&callback, _1, _2));*/

   //ROS_INFO("I heard: [%f]", range)
ros::Subscriber sub = m.subscribe("pir_data", 1000,rangeCallback);   
//ros::Subscriber sub1 = m.subscribe("range_data1", 9600,rangeCallback);  
ros::spin();
//ROS_INFO("I heard: [%f]", range);
return 0;
//r.sleep();
}  
