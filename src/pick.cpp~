#include <ros/ros.h>
#include <moveit/move_group_interface/move_group.h>
#include <moveit/robot_state/conversions.h>
#include <moveit_msgs/DisplayRobotState.h>
#include <boost/math/constants/constants.hpp>
#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/robot_model/robot_model.h>
#include <moveit/robot_state/robot_state.h>
#include <moveit/planning_scene_monitor/planning_scene_monitor.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <geometric_shapes/solid_primitive_dims.h>
#include <mapping_msgs/CollisionObject.h>
#include <geometric_shapes_msgs/Shape.h>
#include <stdio.h>
#include "sensor_msgs/Range.h"
#include "std_msgs/Float32.h"
float range; 
float sx=0.750045;
float sy;
float sz=1.17302;
int i=1;
int j=1;
int c=1;
float k=-0.005;
int n=1;
float dx;
float cz1;
float cz2;
float cx1;
float cx2;
geometry_msgs::Pose target_pose1;
geometry_msgs::Pose target_pose2;
geometry_msgs::Pose target_pose3;
geometry_msgs::Pose target_current;
void  rangeCallback(const std_msgs::Float32::ConstPtr& range_data)
{
range=range_data->data;
 //sleep(10.0);
moveit::planning_interface::MoveGroup group("manipulator");
if(range<50)
{
c=c+1;
}
else
{
c=1;
}
ROS_INFO("c= [%d]",c);
if (c>10)
{
group.stop();
}

//ros::spin();
}
int main( int argc, char** argv )
   {
    ros::init(argc, argv, "goal");
    ros::NodeHandle m;
    ros::Rate r(1);
    //moveit::planning_interface::MoveGroup group("manipulator");
    ros::Subscriber sub = m.subscribe("range_data",1000,rangeCallback);    
    ros::spin();
    return 0;
}  
