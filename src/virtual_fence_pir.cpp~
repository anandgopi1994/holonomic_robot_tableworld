#include <ros/ros.h>
#include <moveit/move_group_interface/move_group.h>
#include <moveit/robot_state/conversions.h>
#include <moveit_msgs/DisplayRobotState.h>
#include <boost/math/constants/constants.hpp>
#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/robot_model/robot_model.h>
#include <moveit/robot_state/robot_state.h>
#include <moveit/planning_scene_monitor/planning_scene_monitor.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <geometric_shapes/solid_primitive_dims.h>
#include <mapping_msgs/CollisionObject.h>
#include <geometric_shapes_msgs/Shape.h>
#include <stdio.h>
#include "sensor_msgs/Range.h"
#include "std_msgs/Float32.h"
#include <message_filters/subscriber.h>
#include <message_filters/time_synchronizer.h>
//using namespace message_filters;
//using namespace std_msgs;
//using namespace std;
float range; 
float detect;
float sx=0.750045;
float sy;
float sz=1.17302;
int i=0;
int c=1;
float k=-0.005;
int n=1;
geometry_msgs::Pose target_pose[100];
void  rangeCallback1(const std_msgs::Float32::ConstPtr& pir_data)
{
detect=pir_data->data;
ROS_INFO("Reached PIR loop");
ROS_INFO("I heard: [%f]", range);
}
//void callback(const std_msgs::Int8::ConstPtr& pir_data, const std_msgs::Int8::ConstPtr& range_data)
// {

void  rangeCallback2(const std_msgs::Float32::ConstPtr& range_data)
{
range=range_data->data;
ROS_INFO("I heard: [%f]", range);
moveit::planning_interface::MoveGroup group("manipulator");
group.setPlannerId("RRTConnectkConfigDefault");
group.setMaxAccelerationScalingFactor(0.05);
group.setMaxVelocityScalingFactor(0.05);
ROS_INFO_STREAM("reached1 "); 
if(range<50 || detect==1)
{
 group.stop();
}
else if(range>80 && detect==0)
{
 group.setMaxAccelerationScalingFactor(0.05);
 group.setMaxVelocityScalingFactor(0.05);
 if(i>98)
 {
  c=-1;
  k=0.005;
 }
 if(i<1)
 {
  k=-0.005;
  c=1;
 }
 target_pose[i].position.x =sx-(k/4);
 sx=sx-(k/4);
 target_pose[i].position.y =-0.00449587;
 target_pose[i].position.z =sz+k;
 sz=sz+k;
 target_pose[i].orientation.x= 2.22693e-05;
 target_pose[i].orientation.y = 0.843563;
 target_pose[i].orientation.z =4.03589e-05;
 target_pose[i].orientation.w =  0.53703;
 group.setPoseTarget(target_pose[i]);
 group.asyncMove();
 i=i+c;
 sleep(0.2);
}
else
{
 ROS_INFO("reachedmoving loop");
 group.setMaxAccelerationScalingFactor(0.005);
 group.setMaxVelocityScalingFactor(0.005);
 if(i>98)
 {
  c=-1;
  k=0.005;
 }
 if(i<1)
 {
  k=-0.005;
  c=1;
 }
 target_pose[i].position.x =sx-(k/4);
 sx=sx-(k/4);
 target_pose[i].position.y =-0.00449587;
 target_pose[i].position.z =sz+k;
 sz=sz+k;
 target_pose[i].orientation.x= 2.22693e-05;
 target_pose[i].orientation.y = 0.843563;
 target_pose[i].orientation.z =4.03589e-05;
 target_pose[i].orientation.w =  0.53703;
 group.setPoseTarget(target_pose[i]);
 group.asyncMove();
 i=i+c;
 sleep(0.2);
}
ros::spin();
}
int main( int argc, char** argv )
   {
    ros::init(argc, argv, "ultrasonic");
    ros::NodeHandle m;
    ros::Rate r(1);
   // message_filters::Subscriber<std_msgs::Int8> sub1(m, "pir_data", 1);
    //message_filters::Subscriber<std_msgs::Int8> sub2(m, "range_data", 1);
    //TimeSynchronizer<Int8,Int8> sync(sub1,sub2,10);
    //typedef sync_policies::ExactTime<Float32, Float32> MySyncPolicy;
    //Synchronizer<MySyncPolicy> sync(MySyncPolicy(10), sub1, sub2);
   // sync.registerCallback(boost::bind(&callback, _1, _2));
    ros::Subscriber sub1 = m.subscribe("pir_data", 1000,rangeCallback1);
    ros::Subscriber sub2 = m.subscribe("range_data", 1000,rangeCallback2);    
    ros::spin();
    return 0;
}  
